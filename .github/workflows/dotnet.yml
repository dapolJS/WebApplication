name: .NET

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        options: --health-cmd="exit 0" --health-interval=10s --health-timeout=5s --health-retries=3
        ports:
          - 1433:1433
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: "YourStrong!Passw0rd" # Replace with a strong password

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

  test:
    runs-on: ubuntu-latest
    needs: build # Ensure the build job runs first

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        options: --health-cmd="exit 0" --health-interval=10s --health-timeout=5s --health-retries=3
        ports:
          - 1433:1433
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: "YourStrong!Passw0rd"

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      # Install SQL Server tools
      - name: Set up SQL Server tools
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gnupg
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
          # Add sqlcmd to the path
          echo "export PATH=$PATH:/opt/mssql-tools/bin" >> ~/.bashrc
          source ~/.bashrc

      # Wait for SQL Server to be ready
      - name: Wait for SQL Server to be ready
        run: |
          # Wait for SQL Server to be available before proceeding
          while ! nc -z localhost 1433; do
          echo "Waiting for SQL Server..."
          sleep 5
          done
          echo "SQL Server is up and running."

      # Create Database if not exists
      - name: Create Database if not exists
        run: |
          /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "YourStrong!Passw0rd" -Q "IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'FirstWebApiNotes') CREATE DATABASE FirstWebApiNotes;"

      # Install dotnet-ef tool
      - name: Install dotnet-ef tool
        run: |
          dotnet tool install --global dotnet-ef
          echo "$(dotnet --list-sdks)"

      # Apply Entity Framework Migrations
      - name: Apply Entity Framework Migrations
        run: |
          dotnet ef database update --project ./FirstWebApi/FirstWebApi.csproj --configuration Release --context DataContextEF
          dotnet ef database update --project ./FirstWebApi/FirstWebApi.csproj --configuration Release --context IdentityDbContext

        env:
          ASPNETCORE_ENVIRONMENT: "Testing"

      # Seed Database (assuming you have a seed.sql file)
      - name: Seed Database
        run: |
          /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "YourStrong!Passw0rd" -i ./SqlSeed/SQLQuery_3.sql

      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore

      # Build the project
      - name: Build the project
        run: dotnet build --no-restore

      # Run tests
      - name: Test
        run: dotnet test --no-build --verbosity minimal
        env:
          ASPNETCORE_ENVIRONMENT: "Testing"
          TEST_USER: ${{ secrets.TEST_USER }}
          TEST_USER_PSW: ${{ secrets.TEST_USER_PSW }}
