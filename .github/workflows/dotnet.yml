name: .NET CI Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  # Job 1: Setup and Build
  setup-and-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

  # Job 2: Start SQL Server container with docker-compose
  database-setup:
    runs-on: ubuntu-latest
    needs: setup-and-build   # This job runs after the setup-and-build job
    steps:
      - name: Clean up Docker and containerd packages (if any)
        run: |
          sudo apt-get remove --purge docker docker-engine docker.io containerd runc
          sudo apt-get autoremove -y
          sudo apt-get clean

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            apt-transport-https \
            ca-certificates \
            curl \
            software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          sudo systemctl start docker
          sudo systemctl enable docker

      - name: Start SQL Server container
        run: |
          echo "version: '3.8'
          services:
            sqlserver:
              image: mcr.microsoft.com/mssql/server:2019-latest
              ports:
                - 1433:1433
              environment:
                ACCEPT_EULA: 'Y'
                SA_PASSWORD: 'YourStrong!Passw0rd'
          " > docker-compose.yml
          docker-compose up -d

      - name: Wait for SQL Server to be ready
        run: |
          while ! nc -z localhost 1433; do
            echo "Waiting for SQL Server..."
            sleep 5
          done
          echo "SQL Server is up and running."

      - name: Create Database if not exists
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gnupg
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
          
          echo "export PATH=\$PATH:/opt/mssql-tools/bin" >> ~/.bashrc
          source ~/.bashrc
          export PATH=$PATH:/opt/mssql-tools/bin
          
          /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "YourStrong!Passw0rd" -Q "IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'FirstWebApiNotes') CREATE DATABASE FirstWebApiNotes;"

      - name: Seed Database
        run: |
          /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "YourStrong!Passw0rd" -i ./SqlSeed/SQLQuery_3.sql

  # Job 3: Apply Migrations
  migrations:
    runs-on: ubuntu-latest
    needs: database-setup   # This job runs after the database-setup job
    steps:
      - name: Install SQL Server tools
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gnupg
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
          
          echo "export PATH=\$PATH:/opt/mssql-tools/bin" >> ~/.bashrc
          source ~/.bashrc
          export PATH=$PATH:/opt/mssql-tools/bin
          
          which sqlcmd

      - name: Apply Entity Framework Migrations
        run: |
          dotnet tool install --global dotnet-ef
          dotnet ef database update --project ./FirstWebApi/FirstWebApi.csproj --configuration Release --context DataContextEF
        env:
          ASPNETCORE_ENVIRONMENT: "Testing"

  # Job 4: Run Tests
  test:
    runs-on: ubuntu-latest
    needs: migrations   # This job runs after the migrations job
    steps:
      - name: Install SQL Server tools
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gnupg
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
          
          echo "export PATH=\$PATH:/opt/mssql-tools/bin" >> ~/.bashrc
          source ~/.bashrc
          export PATH=$PATH:/opt/mssql-tools/bin
          
          which sqlcmd

      - name: Run Tests
        run: dotnet test --no-build --verbosity normal
        env:
          ASPNETCORE_ENVIRONMENT: "Testing"
