name: .NET CI Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  # Job 1: Setup and Build
  setup-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore

  # Job 2: Setup SQL Server
  sql-setup:
    runs-on: ubuntu-latest
    needs: setup-and-build  # This job runs after setup-and-build
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        options: --health-cmd="exit 0" --health-interval=10s --health-timeout=5s --health-retries=3
        ports:
          - 1433:1433
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: "YourStrong!Passw0rd"
          
    steps:
    - name: Wait for SQL Server to be ready
      run: |
        # Wait for SQL Server to be available before proceeding
        while ! nc -z localhost 1433; do
        echo "Waiting for SQL Server..."
        sleep 5
        done
        echo "SQL Server is up and running."
        
    - name: Set up SQL Server tools
      run: |
        sudo apt-get update
        sudo apt-get install -y curl gnupg
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
        sudo apt-get update
        sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
        echo "export PATH=$PATH:/opt/mssql-tools/bin" >> ~/.bashrc
        source ~/.bashrc

    - name: Create Database if not exists
      run: |
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "YourStrong!Passw0rd" -Q "IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'FirstWebApiNotes') CREATE DATABASE FirstWebApiNotes;"

    - name: Install dotnet-ef tool
      run: |
        dotnet tool install --global dotnet-ef
        echo "$(dotnet --list-sdks)"
        
    - name: Apply Entity Framework Migrations
      run: |
        dotnet ef database update --project ./FirstWebApi/FirstWebApi.csproj --configuration Release --context DataContextEF
      env:
        ASPNETCORE_ENVIRONMENT: "Testing"

    - name: Seed Database
      run: |
         /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "YourStrong!Passw0rd" -i ./SqlSeed/SQLQuery_3.sql

  # Job 3: Run Tests
  test:
    runs-on: ubuntu-latest
    needs: sql-setup  # This job runs after sql-setup
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        options: --health-cmd="exit 0" --health-interval=10s --health-timeout=5s --health-retries=3
        ports:
          - 1433:1433
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: "YourStrong!Passw0rd"
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore

    - name: Wait for SQL Server to be ready
      run: |
        # Wait for SQL Server to be available before proceeding
        while ! nc -z localhost 1433; do
        echo "Waiting for SQL Server..."
        sleep 5
        done
        echo "SQL Server is up and running."

    - name: Run Tests
      run: dotnet test --no-build --verbosity normal
      env:
        ASPNETCORE_ENVIRONMENT: "Testing"
